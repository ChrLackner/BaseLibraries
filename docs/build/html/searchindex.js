Search.setIndex({"docnames": ["BaseLibraries", "Basic", "ForDev", "GetStart", "README", "SparseMat", "UserSample", "index", "test2"], "filenames": ["BaseLibraries.md", "Basic.md", "ForDev.md", "GetStart.md", "README.md", "SparseMat.md", "UserSample.md", "index.rst", "test2.md"], "titles": ["BasicFuncs", "\u57fa\u672c\u30d8\u30c3\u30c0", "\u958b\u767a\u8005\u5411\u3051", "[\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9]", "BaseLibralies", "SparseMat", "\u5229\u7528\u4f8b", "BaseLibraries\u89e3\u8aac\u7528\u30da\u30fc\u30b8", "Aiueo"], "terms": {"\u6709\u9650": [0, 5, 7], "\u8981\u7d20": [0, 5, 6, 7], "\u6700\u9069": [0, 7], "\u306a\u3069": [0, 5, 7], "\u6570\u5024": [0, 7], "\u8a08\u7b97": [0, 5], "\u9032\u5316": 0, "\u95a2\u9023": [0, 7], "\u4f7f\u3046": [0, 3, 5, 7], "\u57fa\u672c": [0, 4, 7, 8], "\u64cd\u4f5c": [0, 2, 6], "\u30e9\u30a4\u30d6\u30e9\u30ea": [0, 3, 4, 5, 8], "\u3082\u306e": [0, 7], "\u3067\u3059": [0, 1, 2, 3, 5, 6, 7], "++": [0, 2, 5, 6, 7], "\u30e1\u30eb\u30bb\u30f3\u30cc\u30c4\u30a4\u30b9\u30bf": 0, "\u30e9\u30c3\u30d1": [0, 2, 5], "\u3068\u3057\u3066": [0, 2, 5, 7], "\u50cd\u304f": 0, "\u4e71\u6570": [0, 7], "\u3002\u300c": 0, "/mt": [0, 6], ".hpp": [0, 5, 6, 7], "\u30a4\u30f3\u30af\u30eb\u30fc\u30c9": [0, 5], "\u4f7f\u3063": [0, 2, 3, 5, 7], "\u3060\u3055\u3044": [0, 3, 5, 6, 7], "static": [0, 3], "\u95a2\u6570": [0, 5], "\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9": [0, 5, 6], "\u4f5c\u6210": [0, 2, 5], "\u305a\u306b": 0, "\u547c\u3073\u51fa\u3057": [0, 2, 5, 6], "\u30b7\u30fc\u30c9": [0, 6], "\u521d\u671f": 0, "\u521d\u671f\u5316": [0, 5, 6], "\u30e1\u30bd\u30c3\u30c9": [0, 2, 5, 6], "\u30e9\u30f3\u30c0\u30e0": 0, "\u307e\u3059": [0, 1, 2, 3, 5, 6, 7], "\u5f15\u6570": [0, 5], "\u6307\u5b9a": [0, 5], "\u6574\u6570": 0, "\u3057\u3066": [0, 5], "\u30e1\u30eb\u30bb\u30f3\u30cc": [0, 6, 7], "\u30c4\u30a4\u30b9\u30bf": 0, "\u751f\u6210": [0, 6, 7], "\u7bc4\u56f2": [0, 2, 5], "\u6700\u5927": [0, 5], "\u307e\u3067": 0, "\u672a\u6e80": 0, "\u8fd4\u3057": [0, 5], "<=": 0, "\u4e00\u69d8": 0, "\u767a\u751f": 0, "n\u500b": 0, "\u7570\u306a\u308b": 0, "\u5b9f\u6570": [0, 5, 7], "\u6b63\u898f": [0, 6], "\u5206\u5e03": 0, "\u5f93\u3046": 0, "(limit": 0, "\u7d76\u5bfe\u5024": 0, "\uff14sigma": 0, "\u3067\u3057\u304b": 0, "\u51fa\u529b": 0, "\u306a\u3044": [0, 5], "\u5bfe\u6570": 0, "\u7d2f\u7a4d": 0, "\u6a19\u6e96": 0, "\u6307\u6570": 0, "\u30ab\u30a4": 0, "\uff08n": 0, "\u81ea\u7531\u5ea6": 0, "\u30d5\u30a3\u30c3\u30b7\u30e3\u30fc": 0, "\uff08m": 0, "\u30dd\u30a2\u30bd\u30f3": 0, "\u30ac\u30f3\u30de": 0, "\u30ef\u30a4\u30d6\u30eb": 0, "\u30d9\u30eb\u30cc\u30fc\u30a4": 0, "\u78ba\u7387a": 0, "true": [0, 5], "\u4e8c\u9805": 0, "\u6210\u529f": 0, "\u78ba\u7387": 0, "\u4e8b\u8c61": 0, "\u56de\u65bd\u884c": 0, "\u56de\u6570": 0, "\u8fd4\u3059": 0, "\u5024\u89e3": 0, "\u4f7f\u3044": [0, 5, 6, 7], "\u305d\u3046": [0, 7], "\u307e\u3068\u3081": [0, 7], "\u30ac\u30a6\u30b9": [0, 6, 7], "\u7a4d\u5206": [0, 6, 7], "\u3042\u308a": [0, 2, 5], "/commonfuncs": 0, "\u56db\u6368": [0, 5], "\u4e94\u5165": 0, "\u3002\u3044\u307e": 0, "std": [0, 1], "\u666e\u901a": 0, "\u4e00\u5fdc": 0, "\u5165\u529b\uff58": 0, "\u30b7\u30b0\u30e2\u30a4\u30c9": 0, "\u5165\u529b": 0, "\u7d50\u679c": [0, 5, 6], "\u3002k": 0, "\u4fc2\u6570": [0, 1, 5, 6], "(x": 0, "(-": 0, "*x": 0, "))": 0, "\u70b9\u6570": 0, "\u91cd\u307f": 0, "\u683c\u7d0d": 0, "\u304f\u3060": [0, 2, 5, 6, 7], "\u3055\u3044": [0, 2, 5, 6, 7], "\u30dd\u30a4\u30f3\u30bf": [0, 2, 6], "\u4e8b\u524d": [0, 5], "\u30b5\u30a4\u30ba": [0, 5, 6], "\u78ba\u4fdd": [0, 5], "\u304a\u3044": [0, 5], "\u516d\u9762\u4f53\u7528": 0, "\u7a4d\u5206\u70b9": 0, "\u6210\u5206": 0, "\u3001_": 0, "\u305d\u306e": [0, 2], "\u30d7\u30ea\u30ba\u30e0": 0, "\u3002xy\u9762": 0, "\u4e09\u89d2": 0, "\u5f62\u9762": 0, "\u65b9\u5411": [0, 2], "\u5236\u9650": 0, "\u307e\u305b": [0, 2], "\u4e09\u76f8": 0, "\u4f4d\u76f8": 0, "\uff08u": 0, "\u304b\u3089": [0, 1, 5, 6, 7], "\uff09\u3002": [0, 5], "\u30c7\u30d5\u30a9\u30eb\u30c8": [0, 5, 6], "\u76f8\u9806": 0, "=-": 0, "\u3064\u307e\u308a": 0, "]=": 0, "deg": [0, 1], "pi": [0, 1], "\u6ce2\u5f62wave": 0, "\u96e2\u6563": 0, "\u30d5\u30fc\u30ea\u30a8": 0, "\u5909\u63db": [0, 1], "\u884c\u3044": [0, 5], "\u3002wave": 0, "\u30c7\u30fc\u30bf": [0, 2], "\u300csize": 0, "\u5b9f\u90e8": 0, "\u865a\u90e8": 0, "\u4ee3\u5165": [0, 5], "\u306a\u304a": 0, "\u4ee5\u964d": 0, "\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0": 0, "\u610f\u5473": 0, "\u307e\u305f": [0, 3, 5], "\u5404\u6b21": 0, "\u5927\u304d\u3055": 0, "[rad": [0, 1], "\u3001ampl": 0, "\u9006\u5909": 0, "\u884c\u3063": 0, "\u6ce2\u5f62": 0, "\u6b21\u6570": 0, "\u4ee5\u5916": [0, 5], "\u30bc\u30ed": [0, 5], "\uff12\u3064": 0, "\u5358\u4f4d": 0, "\u5bfe\u79f0": [0, 5], "\u90e8\u5206": [0, 5], "\u30d5\u30eb": 0, "\u4f5c\u308a": [0, 5], "\u96fb\u6c17": 0, "\u89d2\u5ea6": 0, "\u3044\u305a\u308c\u304b": 0, "\u5165\u308a": 0, "\u6e21\u3057": [0, 5], "\u3002(": 0, "0deg": 0, "]v": 0, "[-": [0, 6], "],": 0, "ok": [0, 6], "\uff08sub": 0, "\u306a\u3089": [0, 3, 6], "\u306a\u308a": [0, 2, 5, 6], "_fave": 0, "][": 0, "\u306a\u308b": [0, 5], "\u51fa\u6765": [0, 3], "\u672c\u30e9\u30a4\u30d6\u30e9\u30ea": [0, 1, 2, 5, 6, 7], "\u5229\u7528": [1, 2, 3, 7], "\u3059\u308b": [1, 2, 3, 5, 6], "\u4e0b\u8a18": [1, 7], "3\u3064": 1, "\u540d\u524d": [1, 7], "\u7a7a\u9593": [1, 7], "srlfem": [1, 2, 6, 7], "\u5b9a\u7fa9": [1, 2, 5, 6, 7], "\u5b9a\u6570": 1, "\u300cnamespace": 1, "commondef": 1, "\u5186\u5468": 1, "\u5468\u7387": 1, "_speed": 1, "\u901f\u5ea6": 1, "myu": 1, "0e": [1, 6], "\u771f\u7a7a": 1, "\u900f\u78c1": 1, "vnyu": 1, "\u78c1\u6c17": 1, "\u62b5\u6297": 1, "eps": 1, "\u8a98\u96fb": 1, "normb": 1, "_eps": 1, "\u5fae\u5c0f\u30bc\u30ed": 1, "\u307f\u306a\u3059": 1, "\u78c1\u675f": 1, "\u5bc6\u5ea6": 1, "\u30ce\u30eb\u30e0": [1, 5], "math": 1, "_e": 1, "sqrt": 1, "degtorad": 1, "radtodeg": 1, "rad": 1, "[deg": 1, "dcomplex": [1, 2, 7], "\uff08using": 1, "::": [1, 2, 6, 7], "complex": [1, 5, 7], "\u3092\u3084\u3063": 1, "\u3044\u308b": [1, 2, 5, 6, 7], "\u3060\u3051": [1, 2, 3, 5, 6, 7], "json": 1, "\u578bc": 1, "_json": 1, "\u5916\u90e8": 1, "\u30e9\u30a4\u30d6\u30e9\u30eanlohmann": 1, "/json": 1, "\u8aad\u307f\u8fbc\u3093": 1, "\u5225\u540d": [1, 7], "\u4ed8\u3051": 1, "nlohmann": 1, "\u3084\u3063": 1, "\u5185\u90e8": [2, 5], "\u60c5\u5831": 2, "\u5c11\u3057": [2, 6], "\u8a18\u8ff0": [2, 3], "\u6539\u9020\u6848": 2, "\u30a6\u30a7\u30eb\u30ab\u30e0": 2, "\u758e\u884c": [2, 3, 5, 6, 7], "sparsematc": [2, 6, 7], "sparsematbased": 2, "/sparsematbasec": 2, "\u5b9f\u4f53": 2, "\u6301\u3063": [2, 6], "\u306b\u5bfe\u3059\u308b": 2, "\u4ef2\u4ecb": 2, "\u5b9f\u969b": 2, "\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8": 2, "eigen": [2, 7], "\u4f5c\u3063": [2, 6], "sparsemattmpl": [2, 5], "\uff1aeigen": 2, "map": 2, "\u4eee\u884c": 2, "fix": [2, 6], "\u547c\u3070": 2, "\u308c\u308b": [2, 5], "\u5217\u5316": 2, "\u3053\u308c": [2, 3], "\u30d8\u30c3\u30c0\u30aa\u30f3\u30ea": 2, "\u66f8\u3044": [2, 6], "\uff1asparsemattmpl": 2, "template": 2, "class": [2, 8], "<double": [2, 7], ">;": 2, "using": [2, 7], "sparsematbasec": 2, "<dcomplex": 2, "\u30e1\u30f3\u30d0": 2, "sparsematrix": [2, 5], "<dtype": 2, "rowmajor": 2, "matrix": 2, "\u898b\u3066": 2, "\u901a\u308a": 2, "\u5404\u8981": 2, "\u305f\u3044": [2, 5, 6], "\u5834\u5408": [2, 3, 5], "\u5fc5\u8981": 2, "\u306e\u3067": [2, 3, 5, 6], "//": [2, 6], "\u4ee5\u4e0b": [2, 3, 6, 7], "\u3057\u307e\u3059": [2, 5], "\u500b\u5225": [2, 6], "\u4f5c\u308b": 2, "mata": [2, 6], "\u3053\u306e": [2, 3, 5, 7], "\u884c\u5217": [2, 6, 7], "\u5217\u5b9f\u4f53": 2, ")\u3057": 2, "slv": [2, 7], "_int": [2, 7], "size": [2, 6], ".size": 2, "start": [2, 7], "_posl": 2, "new": [2, 6], "[size": 2, "];": [2, 6], "end": [2, 8], "row": 2, "\u53d6\u5f97": 2, "auto": 2, "col": 2, "_ptrl": 2, ".matrix": 2, "->": 2, "getcolptr": 2, "()": [2, 6], "val": 2, "getvalueptr": 2, "\u5404\u884c": 2, "getcols": 2, "(start": 2, ");": [2, 6], "\u3054\u3068": 2, "\u30eb\u30fc\u30d7": 2, "\u3059\u308c": [2, 3], "\u53c2\u7167": 2, "\u3067\u304d": [2, 3, 5, 6], "for": [2, 6], "(slv": 2, "ii": 2, "){": [2, 6], "const": 2, "_size": [2, 6], "_posa": 2, "[ii": 2, "\u884cii": 2, "\u304a\u3051\u308b": 2, "\u5217\u65b9": 2, "\u3042\u308b": [2, 5, 6], "\u3068\u3053\u308d": [2, 6], "\u3088\u3046": [2, 6], "; j": 2, "retu": 2, "_ptra": 2, "[j": 2, "double": [2, 6], "temp": 2, "cout": [2, 6], "<\"": 2, ", \"": 2, "\u30c6\u30b9\u30c8": [3, 4], "\u3042\u3042\u3042": 4, "\u5217\u7528": [5, 6], "\u30d9\u30fc\u30b9": 5, "\u304a\u308a": 5, "\u30e9\u30c3\u30d1\u30fc": [5, 7], "\u6a5f\u80fd": [5, 7], "\u4e21\u65b9": [5, 7], "\u5bfe\u5fdc": [5, 7], "\u56db\u5247": 5, "\u6f14\u7b97": 5, "\u7528\u610f": 5, "\u30bd\u30eb\u30d0": [5, 7], "\u30aa\u30ea\u30b8\u30ca\u30eb": 5, "\u52a0\u901f": [5, 6], "\u3064\u304d": 5, "iccg": [5, 6], "bicgstab": 5, "\u30fbusing": 5, "\u5192\u982d": 5, "\u307e\u307e\u3067": 5, "\u3044\u3044": 5, "\u601d\u3044": 5, "\u8d85\u5927": 5, "\u898f\u6a21": 5, "unsinged": 5, "long": [5, 7], "\u66f8\u304d\u63db\u3048": 5, "\u307e\u305a": [5, 6], "\u8ffd\u52a0": 5, "\u3044\u304d": 5, "\u5b8c\u4e86": 5, "\u305f\u3089": [5, 6], "fix\u30e1\u30bd\u30c3\u30c9": 5, "\u78ba\u5b9a": [5, 6], "\u3066\u304f": 5, "\u78ba\u5b9a\u5f8c": 5, "\u884c\u3048": 5, "\u3002fix": 5, "\u5404\u7a2e": 5, "\u884c\u3046": 5, "\u30a8\u30e9\u30fc": [5, 6], "\u6050\u308c": 5, "\u6ce8\u610f": 5, "\u300csparsemat": 5, "/sparsemat": [5, 6], "\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf": 5, "\u308c\u307e\u305b": 5, "\u72b6\u614b": 5, "\u884c\u6570": [5, 6], "\u547c\u3073": 5, "\u672c\u65b9\u6cd5": 5, "\u6700\u521d": 5, "\u6e08\u307f": [5, 6], "(fix": 5, "\u5f8c\u304b": 5, "\u304b\u3069\u3046": 5, "\u4e2d\u8eab": 5, "\u7a7a\u304b": 5, "\u3069\u3046": 5, "\u758e\u884c\u5217": [5, 7], "\u72b6\u6cc1": 5, "\u4f4d\u7f6e": [5, 6], "\u307e\u307e": 5, "\u52a0\u3048": 5, "\u305d\u3053": 5, "\u4efb\u610f": 5, "\u3059\u3067\u306b": 5, "\u884c\u76ee": 5, "\u304b\u3069": 5, "\u5224\u5b9a": [5, 6], "\u3042\u3063": 5, "index": 5, "\u884c\u4f4d": 5, "\u300crow": 5, "\u30b3\u30d4\u30fc": 5, "\u5217\u4f4d": 5, "\u300ccol": 5, "\u5185\u5bb9": 5, "\u30d5\u30a1\u30a4\u30eb": [3, 5], "\u66f8\u304d\u51fa\u3057": 5, "\u30b3\u30f3\u30bd\u30fc\u30eb": 5, "\u8868\u793a": [5, 6], "\u30d9\u30af\u30c8\u30eb": [5, 6], "\u639b\u3051": 5, "\u914d\u5217": 5, "\uff08vec": 5, "\u8907\u7d20": [5, 7], "\u3069\u3061\u3089": 5, "\u3067\u3082": 5, "\u81ea\u8eab": 5, "\u5168\u8981": 5, "\u8db3\u3057": 5, "\u8ee2\u7f6e": 5, "[r": 5, "]\u00d7": 5, "r2a": 5, "\u629c\u304d\u51fa\u3057": 5, "\u3089\u308c": 5, "\u5217rangeb": 5, "\u5883\u306b": 5, "2\u3064": 5, "\u5206\u3051": 5, "\u884crangea": 5, "\u3088\u308a": 5, "\u524a\u9664": 5, "\u4e0b\u4e09\u89d2\u884c\u5217": 5, "\u4e0a\u4e09\u89d2\u884c\u5217": 5, "\u9006\u884c\u5217": 5, "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0": 5, "\u5927\u884c\u5217": 5, "\u3084\u308b": 5, "\u30e1\u30e2\u30ea": 5, "\u5439\u304d\u98db\u3076": 5, "\uff01\uff09": 5, "\u4e94\u5165\u3057": 5, "\u4e38\u3081": 5, "\u6570\u7528": 5, "\u540c\u3058": 5, "/sparsematc": [5, 6], "\u8907\u6570": [5, 6, 7], "\u7ba1\u7406": 5, "/sparsematoperators": [5, 6], "(a": 5, "a2": 5, "mat2": 5, "\u8db3\u3059": 5, "\u305a\u3089\u3059": 5, "\u3053\u3068": 5, "\u53ef\u80fd": [5, 6], "(mat": 5, ")*": 5, "\u304b\u3051": 5, "\u3001(": 5, "+a": 5, "\u958b\u59cb": 5, "\u63d0\u4f9b": 5, "static\u30e1\u30bd\u30c3\u30c9": [5, 6], "/matsolvers": [5, 6], "\u81ea\u4f5c": [5, 7], "\u53f3\u8fba": 5, "\u4e0e\u3048\u308b": 5, "\u30d1\u30bf\u30fc\u30f3": 5, "\u5f15\u304f": 5, "\uff08normb": 5, "\u53ce\u675f": [5, 6], "\u3002\"": 5, "/normb": 5, "\u3002\uff09": 5, "^-": [5, 6], "\u53cd\u5fa9": 5, "\uff1aax": 5, "=b": [5, 6], ":ax": 5, "\u3002size": 5, "\uff08ax": 5, "size0": 5, "\u30d9\u30af\u30c8\u30ebx": 5, "\u51e6\u7406": [5, 6, 7], "\u671f\u5316": 5, "\u904e\u53bb": 5, "\u5165\u3063": 5, "\u6d41\u7528": 5, "false": 5, "\u305d\u308c": [3, 5], "\u306b\u3059\u308c": 5, "\u59cb\u3081": 5, "\u4e0a\u8a18iccg": 5, "\u6570\u7248": 5, "\u4f7f\u3044\u65b9": [5, 7], "\u305f\u3060\u3057": 5, "\u306e\u307f": 5, "\u30a8\u30eb\u30df\u30fc\u30c8": 5, "\u672a\u5bfe": 5, "\u4ed8\u5c5e": 5, "\u4e0a\u8a18": 5, "\u65b9\u6cd5": [3, 6], "\u793a\u3057": 6, "github": [6, 7], "example": [3, 6], "\u53c2\u7167\u304f": 6, "#include": 6, "int": [6, 7], "main": 6, "(int": 6, "argc": 6, "char": 6, "argv": 6, "[]": 6, "10": 6, "seed": 6, "\u4e00\u5fdcc": 6, "srand": 6, "(seed": 6, "init": 6, "_rand": 6, "\u3042\u3068": 6, "\u81ea\u7531": 6, "\u4f8b\u3048": [3, 6], "/*": 6, "\u5e73\u5747": 6, "\u5206\u6563": 6, "sig": 6, "*sig": 6, "rand": 6, "normal": 6, "(u": 6, "endl": 6, "commonfuncs": [6, 7], "\u3084\u308a": 6, "hpp": 6, "\u63a2\u3057": 6, "\u547c\u3073\u51fa\u3059": 6, ",+": 6, "num": 6, "_g": 6, "tg": 6, "[num": 6, "wg": 6, "setgauss": 6, "(tg": 6, "< i": 6, "< \"": 6, "th": 6, "point": 6, "[i": 6, "<<": 6, "and": 6, "it": 6, "'s": 6, "delete": 6, "\u3082\u3057\u304f": 6, "\u6c7a\u3081": 6, "add": 6, "\u4ed8\u3051\u8db3\u3057": 6, "\u3044\u304f": 6, "\u5b8c\u6210": 6, "\u56fa\u5b9a": 6, "include": 6, "\u9069\u5f53": 6, "\u30aa\u30fc\u30d0\u30fc": 6, "\u843d\u3061": 6, "\u7d42\u308f\u3063": 6, "print": [6, 8], ")=": 6, "/(": 6, "\u3001add": 6, "matb": 6, "\u3068\u3057\u307e\u3057\u3087": 6, "vecb": 6, "};": 6, "\u30fb\u30d9\u30af\u30c8\u30eb": 6, "vec": 6, "total": 6, ";/": 6, "\u52d5\u7684": 6, "\u4fdd\u6301": 6, "\u4e0b\u3055\u3044": 6, "\u548c\u3084\u7a4d\u3082": 6, "matx": 6, "matcx": 6, "\u307e\u3068\u3081\u3066": 6, "\u52d5\u304d": 6, "sparsematoperators": [6, 7], "\u8907\u96d1": 6, "\u8aad\u3093": 6, "\u5b9f\u884c": [3, 6], "matz": 6, "plusshift": 6, "(matas": 6, "matbs": 6, ".print": 6, "\u306b\u5bfe\u3057": 6, "_siz": 6, "results": 6, "[total": 6, "\u53f3\u8fbab": 6, "ax": 6, "\u89e3\u304d": 6, "*/": 6, "bool": 6, "bl1": 6, "matsolvers": [6, 7], "solveiccg": 6, "(total": 6, "matas": 6, "\u96fb\u78c1": 7, "\u754c\u6709": 7, "\u9650\u8981": 7, "\u7d20\u6cd5": 7, "\u7528\u57fa\u672c": 7, "\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9": 7, "\u30a2\u30c3\u30d7": 7, "https": 7, ":/": 7, ".com": 7, "/jp": 7, "-mars": 7, "/baselibraries": [3, 7], "\u73fe\u5728": 7, "\u6210\u308a": 7, "basicfuncs": 7, "\u7528\u7a4d": 7, "\u5206\u70b9": 7, "\u89e3\u6790": 7, "sparsemat": 7, "\u7528\u3044\u308b": 7, "\u6ce8\u91c8": 7, "\u300csrlfem": 7, "\u547c\u3073\u51fa\u3059\u969b": 7, "\u4ed8\u3051\u308b": 7, "namespace": 7, "\u8907\u7d20\u6570": 7, "\u5c02\u7528": 7, "\u3002std": 7, "\u3002int": 7, "\u3082\u3057": 7, "\u5909\u3048": 7, "\u305f\u3051\u308c": 7, "\u5909\u66f4": 7, "\u3002\uff08": 7, "\u8a73\u7d30": 7, "\u8aac\u660e": 7, "\u30d8\u30c3\u30c0": 7, "basicdefines": 7, "basicdefinesc": 7, "basicdefinesjson": 7, "mt": 7, "\u30af\u30e9\u30b9": 7, "\u5229\u7528\u4f8b": 7, "\u958b\u767a": 7, "\u5411\u3051": 7, "\u306b\u3064\u3044\u3066": 7, "xyz": 8, "aaaaaa": 8, "bbbb": 8, "aaa": 8, "vvv": 8, "hoge": 8, "def": 8, "\uff1acmake": 3, "\u7c21\u6613": 3, "\u30b5\u30f3\u30d7\u30eb": 3, "\u7f6e\u3044": 3, "\u30b3\u30f3\u30d1\u30a4\u30eb": 3, "cmake": 3, "mkdir": 3, "build": 3, "cd": 3, "..": 3, "get": 7, "\u30d5\u30a9\u30eb\u30c0": 3, "\u3067\u304d\u308b": 3, "\u76f4\u4e0b": 3, "\uff08.": 3, "lib": 3, "\u81ea\u5206": 3, "\u4e0blib": [], "\u901a\u5e38": 3, "\u540c\u69d8": 3, "\u5834\u6240": 3, "\u300c/": 3, "baselibraries": 3, "testprog": 3, "\u3068\u3057": 3, "\u3068\u304d": 3, "makefile": 3, "cxx": 3, "icpx": 3, "cflags": 3, "-i": 3, "opts": 3, "qmkl": 3, "ipo": 3, "libs": 3, "-l": 3, "lsparsemat": 3, "\u30d7\u30ed\u30b0\u30e9\u30e0": 7, "\u30ea\u30f3\u30af": 7, "\u30e9\u30a4\u30d6\u30e9\u30ea\u30d5\u30a1\u30a4\u30eb": [0, 5], ".lib": [0, 5], "**": [], "\u300cbasicfuncs": 0}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"basicfuncs": [0, 6], "mt": [0, 6], "\u30af\u30e9\u30b9": [0, 5], "void": [0, 5], "init": [0, 5], "_rand": 0, "()": [0, 5], "(int": 0, "xx": 0, "int": [0, 5], "genrand": 0, "_int": [0, 5], "mrand": 0, "double": [0, 5], "_real": 0, "unif": 0, "(double": 0, "make": 0, "_diff": 0, "_rands": 0, "(const": [0, 5], "const": [0, 5], "max": [0, 5], "rands": 0, "normal": 0, "sigma": 0, "bool": [0, 5], "limit": 0, "_sig": 0, "=false": [0, 5], "lognorm": 0, "norm": 0, "_cdf": 0, ");": [0, 5], "exp": 0, "lam": 0, "chai": 0, "fisher": 0, "student": 0, "_t": 0, "poisson": 0, "gamma": 0, "weibull": 0, "bernoulli": 0, "binomial": 0, "commonfuncs": 0, "round": [0, 5], "sigmoid": 0, "constk": 0, "setgauss": 0, "tg": 0, "wg": 0, "nump": 0, "setgausshex": 0, "_x": 0, "_y": 0, "_z": 0, "setgausspri": 0, "_xy": 0, "calcgausspoint": 0, "gauss": 0, "_p": 0, "_w": 0, "num": 0, "_gauss": 0, "_three": 0, "_phase": 0, "three": 0, "_rad": 0, "minus": 0, "=true": [0, 5], "dft": 0, "size": [0, 5], "wave": 0, "_data": 0, "_r": [0, 5], "_im": 0, "ampl": 0, "phase": 0, "idft": 0, "_filtering": 0, "target": [0, 5], "calc": 0, "_deg": 0, "threefullwavemaker": 0, "sub": 0, "_wave": 0, "_count": 0, "_points": 0, "full": 0, "**": 0, "_waves": 0, "\u57fa\u672c": [1, 3, 5, 6], "\u30d8\u30c3\u30c0": 1, "basicdefines": 1, ".hpp": 1, "basicdefinesc": 1, "basicdefinesjson": 1, "\u958b\u767a": 2, "\u5411\u3051": 2, "sparsemat": [2, 5, 6], "\u306b\u3064\u3044\u3066": 2, "\u69cb\u6210": 2, "\u758e\u884c\u5217": [2, 6], "\u8981\u7d20": 2, "\u30a2\u30af\u30bb\u30b9": 2, "baselibralies": 4, "testx": 4, "\u64cd\u4f5c": 5, "(slv": 5, "mat": 5, "isfixed": 5, "isempty": 5, "tempinitialize": 5, "fix": 5, "resetmat": 5, "add": 5, "gyo": 5, "slv": 5, "retu": 5, "val": 5, "isinclude": 5, ")const": 5, "gettargetrowval": 5, "std": 5, "::": 5, "vector": 5, "<slv": 5, ">&": 5, "row": 5, "_pos": 5, "<double": 5, "_val": 5, "gettargetcolval": 5, "col": 5, "printmat": 5, "string": 5, "str": 5, "=\"": 5, ".csv": 5, "\")": 5, "print": 5, "\u30aa\u30da\u30ec\u30fc\u30bf": 5, "operator": 5, "*(": 5, "vec": 5, "dcomplex": 5, "eigen": 5, "vectorxd": 5, "vectorxcd": 5, "*=": 5, "sparsematc": 5, "+(": 5, "\u305d\u306e": 5, "\u884c\u5217": 5, "trans": 5, "makesubmat": 5, "range": 5, "1a": 5, "1b": 5, "2a": 5, "2b": 5, "matdiv": 5, "(sparsemat": 5, "matk": 5, "rangea": 5, "rangeb": 5, "getmatlower": 5, "getmatupper": 5, "inv": 5, "sparsematoperators": 5, "static": 5, "plusshift": 5, "pos": 5, "dotvecmat": 5, "dotmats": 5, "mata": 5, "matb": 5, "matc": 5, "plusfix": 5, "matab": 5, "(sparsematc": 5, "matabc": 5, "dotfix": 5, "matsolvers": 5, "solveiccg": 5, "conv": 5, "_cri": 5, "_ite": 5, "accera": 5, "vecb": 5, "results": 5, "normb": 5, "solveeigeniccg": 5, "solveeigenbicgstab": 5, "\u5229\u7528\u4f8b": 6, "\u5229\u7528": 6, "\u4e71\u6570": 6, "\u95a2\u6570": 6, "\u4f5c\u6210": 6, "\u56db\u5247": 6, "\u6f14\u7b97": 6, "\u30bd\u30eb\u30d0": 6, "baselibraries": 7, "\u89e3\u8aac": 7, "\u30da\u30fc\u30b8": 7, "\u30e9\u30a4\u30d6\u30e9\u30ea": 7, "\u5185\u5bb9": 7, "contents": 7, "aiueo": 8, "aaaa": 8, "bbb": 8, "get": 3, "start": 3, "\u4f7f\u3044\u65b9": 3, "\u81ea\u4f5c": 3, "\u30d7\u30ed\u30b0\u30e9\u30e0": 3, "\u30ea\u30f3\u30af": 3}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"\u57fa\u672c\u30d8\u30c3\u30c0": [[1, "id1"]], "BasicDefines.hpp": [[1, "basicdefines-hpp"]], "BasicDefinesC.hpp": [[1, "basicdefinesc-hpp"]], "BasicDefinesJSON.hpp": [[1, "basicdefinesjson-hpp"]], "\u958b\u767a\u8005\u5411\u3051": [[2, "id1"]], "SparseMat\u306b\u3064\u3044\u3066": [[2, "sparsemat"]], "SparseMat\u306e\u69cb\u6210": [[2, "id2"]], "\u758e\u884c\u5217\u306e\u8981\u7d20\u30a2\u30af\u30bb\u30b9\u306b\u3064\u3044\u3066\uff1a": [[2, "id3"]], "BaseLibralies": [[4, "baselibralies"]], "TestX": [[4, "testx"]], "\u5229\u7528\u4f8b": [[6, "id1"]], "BasicFuncs\u306e\u5229\u7528\u4f8b": [[6, "basicfuncs"]], "Mt\u4e71\u6570\u306e\u5229\u7528\u4f8b": [[6, "mt"]], "\u57fa\u672c\u95a2\u6570\u306e\u5229\u7528\u4f8b": [[6, "id2"]], "SparseMat\u306e\u5229\u7528\u4f8b": [[6, "sparsemat"]], "\u758e\u884c\u5217\u306e\u4f5c\u6210": [[6, "id3"]], "\u758e\u884c\u5217\u306e\u56db\u5247\u6f14\u7b97": [[6, "id4"]], "\u758e\u884c\u5217\u30bd\u30eb\u30d0": [[6, "id5"]], "Aiueo": [[8, "aiueo"]], "AAAA": [[8, "aaaa"]], "BBB": [[8, "bbb"]], "BaseLibraries\u89e3\u8aac\u7528\u30da\u30fc\u30b8": [[7, "baselibraries"]], "\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u5bb9": [[7, "id1"]], "Contents:": [[7, null]], "BasicFuncs": [[0, "basicfuncs"]], "Mt\u30af\u30e9\u30b9": [[0, "mt"]], "void init_rand()": [[0, "void-init-rand"]], "void init_rand(int xx)": [[0, "void-init-rand-int-xx"]], "int genrand_int32()": [[0, "int-genrand-int32"]], "int mrand(int m)": [[0, "int-mrand-int-m"]], "int mrand(int a, int b)": [[0, "int-mrand-int-a-int-b"]], "double genrand_real1()": [[0, "double-genrand-real1"]], "double unif_rand(double a, double b)": [[0, "double-unif-rand-double-a-double-b"]], "void make_diff_rands(const int n, const int max, int* rands)": [[0, "void-make-diff-rands-const-int-n-const-int-max-int-rands"]], "void make_diff_rands(const int n, double* rands)": [[0, "void-make-diff-rands-const-int-n-double-rands"]], "double normal_rand(double u, double sigma, bool limit_sig=false)": [[0, "double-normal-rand-double-u-double-sigma-bool-limit-sig-false"]], "double lognorm_rand(double u, double sigma)": [[0, "double-lognorm-rand-double-u-double-sigma"]], "double norm_CDF(double u, double sigma, double x)": [[0, "double-norm-cdf-double-u-double-sigma-double-x"]], "double norm_CDF(double x);": [[0, "double-norm-cdf-double-x"]], "double exp_rand(double lam)": [[0, "double-exp-rand-double-lam"]], "double chai_rand(double n)": [[0, "double-chai-rand-double-n"]], "double fisher_rand(double m, double n)": [[0, "double-fisher-rand-double-m-double-n"]], "double student_t_rand(double n)": [[0, "double-student-t-rand-double-n"]], "double poisson_rand(double u)": [[0, "double-poisson-rand-double-u"]], "double gamma_rand(double a, double b)": [[0, "double-gamma-rand-double-a-double-b"]], "double weibull_rand(double a, double b)": [[0, "double-weibull-rand-double-a-double-b"]], "bool bernoulli_rand(double a)": [[0, "bool-bernoulli-rand-double-a"]], "int binomial_rand(double a, int n)": [[0, "int-binomial-rand-double-a-int-n"]], "CommonFuncs\u30af\u30e9\u30b9": [[0, "commonfuncs"]], "int round(double m)": [[0, "int-round-double-m"]], "double sigmoid(double x, double constK)": [[0, "double-sigmoid-double-x-double-constk"]], "void setGauss(double* tg, double* wg, int numP )": [[0, "void-setgauss-double-tg-double-wg-int-nump"]], "void setGaussHEX(double* tg_x, double* tg_y, double* tg_z, double* wg, int numP )": [[0, "void-setgausshex-double-tg-x-double-tg-y-double-tg-z-double-wg-int-nump"]], "void setGaussPRI(double* tg_x, double* tg_y, double* tg_z, double* wg_xy, double* wg_z, int numP_xy, int numP_z)": [[0, "void-setgausspri-double-tg-x-double-tg-y-double-tg-z-double-wg-xy-double-wg-z-int-nump-xy-int-nump-z"]], "void calcGaussPoint(double* gauss_p, double* gauss_w, const int num_gauss)": [[0, "void-calcgausspoint-double-gauss-p-double-gauss-w-const-int-num-gauss"]], "void make_three_phase(double* three_rad, double u_phase_rad, bool minus=true)": [[0, "void-make-three-phase-double-three-rad-double-u-phase-rad-bool-minus-true"]], "void dft(int size, double *wave_data, double *dft_r, double *dft_im)": [[0, "void-dft-int-size-double-wave-data-double-dft-r-double-dft-im"]], "void dft(int size, double *wave_data, double *dft_r, double *dft_im, double *ampl, double *phase)": [[0, "void-dft-int-size-double-wave-data-double-dft-r-double-dft-im-double-ampl-double-phase"]], "void idft(int size, double *dft_r, double *dft_im, double *wave_data)": [[0, "void-idft-int-size-double-dft-r-double-dft-im-double-wave-data"]], "void dft_filtering(int size, int target, double *dft_r, double *dft_im)": [[0, "void-dft-filtering-int-size-int-target-double-dft-r-double-dft-im"]], "double calc_phase_deg(int size, double* wave1, double* wave2)": [[0, "double-calc-phase-deg-int-size-double-wave1-double-wave2"]], "void ThreeFullWaveMaker(int sub_wave_count, int wave_points, int& full_points, double** sub_waves, double*** full_wave)": [[0, "void-threefullwavemaker-int-sub-wave-count-int-wave-points-int-full-points-double-sub-waves-double-full-wave"]], "SparseMat": [[5, "sparsemat"]], "SparseMat\u30af\u30e9\u30b9": [[5, "id1"]], "* \u57fa\u672c\u64cd\u4f5c": [[5, "id2"]], "SparseMat();": [[5, "id3"]], "SparseMat(slv_int x);": [[5, "sparsemat-slv-int-x"]], "SparseMat(const SparseMat& mat);": [[5, "sparsemat-const-sparsemat-mat"]], "bool isFixed()": [[5, "bool-isfixed"]], "bool isEmpty() const": [[5, "bool-isempty-const"]], "void tempInitialize()": [[5, "void-tempinitialize"]], "void fix()": [[5, "void-fix"]], "void resetMat()": [[5, "void-resetmat"]], "void add(slv_int gyo, slv_int retu, double val)": [[5, "void-add-slv-int-gyo-slv-int-retu-double-val"]], "slv_int isInclude(slv_int gyo, slv_int target_r)const": [[5, "slv-int-isinclude-slv-int-gyo-slv-int-target-r-const"]], "void getTargetRowVal(slv_int target, std::vector<slv_int>& row_pos, std::vector<double>& row_val)const": [[5, "void-gettargetrowval-slv-int-target-std-vector-slv-int-row-pos-std-vector-row-val-const"]], "void getTargetColVal(slv_int target, std::vector<slv_int>& col_pos, std::vector<double>& col_val)const": [[5, "void-gettargetcolval-slv-int-target-std-vector-slv-int-col-pos-std-vector-col-val-const"]], "void printMat(const std::string& str=\"Mat.csv\")": [[5, "void-printmat-const-std-string-str-mat-csv"]], "void print()": [[5, "void-print"]], "* \u30aa\u30da\u30ec\u30fc\u30bf\u7fa4": [[5, "id4"]], "double* operator*(const double* vec) const;": [[5, "double-operator-const-double-vec-const"]], "dcomplex* operator*(const dcomplex* vec) const;": [[5, "dcomplex-operator-const-dcomplex-vec-const"]], "Eigen::VectorXd operator*(const Eigen::VectorXd& vec) const;": [[5, "eigen-vectorxd-operator-const-eigen-vectorxd-vec-const"]], "Eigen::VectorXcd operator*(const Eigen::VectorXcd& vec) const;": [[5, "eigen-vectorxcd-operator-const-eigen-vectorxcd-vec-const"]], "void operator*=(const double x)": [[5, "void-operator-const-double-x"]], "SparseMat operator*(const double x) const;": [[5, "sparsemat-operator-const-double-x-const"]], "SparseMatC operator*(const dcomplex x) const;": [[5, "sparsematc-operator-const-dcomplex-x-const"]], "SparseMat operator*(const SparseMat& mat) const;": [[5, "sparsemat-operator-const-sparsemat-mat-const"]], "SparseMatC operator*(const SparseMatC& mat) const;": [[5, "sparsematc-operator-const-sparsematc-mat-const"]], "SparseMat operator+(const SparseMat& mat) const;": [[5, "id5"]], "SparseMatC operator+(const SparseMatC& mat) const;": [[5, "id6"]], "* \u305d\u306e\u4ed6\u306e\u884c\u5217\u30aa\u30da\u30ec\u30fc\u30bf\u7fa4": [[5, "id7"]], "SparseMat trans() const": [[5, "sparsemat-trans-const"]], "SparseMat makeSubMat(slv_int range1a, slv_int range1b, slv_int range2a, slv_int range2b)": [[5, "sparsemat-makesubmat-slv-int-range1a-slv-int-range1b-slv-int-range2a-slv-int-range2b"]], "void MatDiv(SparseMat& matK11, SparseMat& matK12, slv_int rangeA, slv_int rangeB)": [[5, "void-matdiv-sparsemat-matk11-sparsemat-matk12-slv-int-rangea-slv-int-rangeb"]], "SparseMat getMatLower() const;": [[5, "sparsemat-getmatlower-const"]], "SparseMat getMatUpper() const": [[5, "sparsemat-getmatupper-const"]], "SparseMat inv() const": [[5, "sparsemat-inv-const"]], "void round()": [[5, "void-round"]], "SparseMatC\u30af\u30e9\u30b9": [[5, "sparsematc"]], "SparseMatOperators\u30af\u30e9\u30b9": [[5, "sparsematoperators"]], "static SparseMat plusShift(const SparseMat& mat1, const SparseMat& mat2, const double a1, const double a2, const slv_int pos1, const slv_int pos2)": [[5, "static-sparsemat-plusshift-const-sparsemat-mat1-const-sparsemat-mat2-const-double-a1-const-double-a2-const-slv-int-pos1-const-slv-int-pos2"], [5, "id8"]], "static SparseMatC plusShift(const SparseMatC& mat1, const SparseMatC& mat2, const double a1, const double a2, const slv_int pos1, const slv_int pos2)": [[5, "static-sparsematc-plusshift-const-sparsematc-mat1-const-sparsematc-mat2-const-double-a1-const-double-a2-const-slv-int-pos1-const-slv-int-pos2"], [5, "id9"]], "static double* dotVecMat2(const SparseMat& mat1, const SparseMat& mat2, const double* vec1);": [[5, "static-double-dotvecmat2-const-sparsemat-mat1-const-sparsemat-mat2-const-double-vec1"]], "static dcomplex* dotVecMat2(const SparseMat& mat1, const SparseMatC& mat2, const double* vec1);": [[5, "static-dcomplex-dotvecmat2-const-sparsemat-mat1-const-sparsematc-mat2-const-double-vec1"]], "static dcomplex* dotVecMat2(const SparseMatC& mat1, const SparseMat& mat2, const double* vec1);": [[5, "static-dcomplex-dotvecmat2-const-sparsematc-mat1-const-sparsemat-mat2-const-double-vec1"]], "static dcomplex* dotVecMat2(const SparseMatC& mat1, const SparseMatC& mat2, const double* vec1);": [[5, "static-dcomplex-dotvecmat2-const-sparsematc-mat1-const-sparsematc-mat2-const-double-vec1"]], "static dcomplex* dotVecMat2(const SparseMat& mat1, const SparseMat& mat2, const dcomplex* vec1);": [[5, "static-dcomplex-dotvecmat2-const-sparsemat-mat1-const-sparsemat-mat2-const-dcomplex-vec1"]], "static dcomplex* dotVecMat2(const SparseMat& mat1, const SparseMatC& mat2, const dcomplex* vec1);": [[5, "static-dcomplex-dotvecmat2-const-sparsemat-mat1-const-sparsematc-mat2-const-dcomplex-vec1"]], "static dcomplex* dotVecMat2(const SparseMatC& mat1, const SparseMat& mat2, const dcomplex* vec1);": [[5, "static-dcomplex-dotvecmat2-const-sparsematc-mat1-const-sparsemat-mat2-const-dcomplex-vec1"]], "static dcomplex* dotVecMat2(const SparseMatC& mat1, const SparseMatC& mat2, const dcomplex* vec1);": [[5, "static-dcomplex-dotvecmat2-const-sparsematc-mat1-const-sparsematc-mat2-const-dcomplex-vec1"]], "static SparseMat dotMats(const SparseMat& matA, const SparseMat& matB, const SparseMat& matC);": [[5, "static-sparsemat-dotmats-const-sparsemat-mata-const-sparsemat-matb-const-sparsemat-matc"]], "static SparseMatC dotMats(const SparseMat& matA, const SparseMat& matB, const SparseMatC& matC);": [[5, "static-sparsematc-dotmats-const-sparsemat-mata-const-sparsemat-matb-const-sparsematc-matc"]], "static SparseMatC dotMats(const SparseMat& matA, const SparseMatC& matB, const SparseMatC& matC);": [[5, "static-sparsematc-dotmats-const-sparsemat-mata-const-sparsematc-matb-const-sparsematc-matc"]], "static SparseMatC dotMats(const SparseMatC& matA, const SparseMatC& matB, const SparseMatC& matC);": [[5, "static-sparsematc-dotmats-const-sparsematc-mata-const-sparsematc-matb-const-sparsematc-matc"]], "static void plusFix(SparseMat& matAB, const SparseMat& matA, const SparseMat& matB, double a1=1.0, double a2=1.0, slv_int pos1=0, slv_int pos2=0);": [[5, "static-void-plusfix-sparsemat-matab-const-sparsemat-mata-const-sparsemat-matb-double-a1-1-0-double-a2-1-0-slv-int-pos1-0-slv-int-pos2-0"]], "static void plusFix(SparseMatC& matAB, const SparseMat& matA, const SparseMatC& matB, double a1=1.0, double a2=1.0, slv_int pos1=0, slv_int pos2=0);": [[5, "static-void-plusfix-sparsematc-matab-const-sparsemat-mata-const-sparsematc-matb-double-a1-1-0-double-a2-1-0-slv-int-pos1-0-slv-int-pos2-0"]], "static void plusFix(SparseMatC& matAB, const SparseMatC& matA, const SparseMatC& matB, double a1=1.0, double a2=1.0, slv_int pos1=0, slv_int pos2=0);": [[5, "static-void-plusfix-sparsematc-matab-const-sparsematc-mata-const-sparsematc-matb-double-a1-1-0-double-a2-1-0-slv-int-pos1-0-slv-int-pos2-0"]], "static void plusFix(SparseMat& matABC, const SparseMat& matA, const SparseMat& matB, const SparseMat& matC, double a1=1.0, double a2=1.0, double a3=1.0);": [[5, "static-void-plusfix-sparsemat-matabc-const-sparsemat-mata-const-sparsemat-matb-const-sparsemat-matc-double-a1-1-0-double-a2-1-0-double-a3-1-0"]], "static void plusFix(SparseMatC& matABC, const SparseMatC& matA, const SparseMatC& matB, const SparseMatC& matC, double a1=1.0, double a2=1.0, double a3=1.0);": [[5, "static-void-plusfix-sparsematc-matabc-const-sparsematc-mata-const-sparsematc-matb-const-sparsematc-matc-double-a1-1-0-double-a2-1-0-double-a3-1-0"]], "static void dotFix(SparseMat& matAB, const SparseMat& matA, const SparseMat& matB);": [[5, "static-void-dotfix-sparsemat-matab-const-sparsemat-mata-const-sparsemat-matb"]], "static void dotFix(SparseMatC& matAB, const SparseMat& matA, const SparseMatC& matB);": [[5, "static-void-dotfix-sparsematc-matab-const-sparsemat-mata-const-sparsematc-matb"]], "static void dotFix(SparseMatC& matAB, const SparseMatC& matA, const SparseMatC& matB);": [[5, "static-void-dotfix-sparsematc-matab-const-sparsematc-mata-const-sparsematc-matb"]], "static void dotFix(SparseMat& matAB, const SparseMat& matA, const SparseMat& matB, const SparseMat& matC);": [[5, "static-void-dotfix-sparsemat-matab-const-sparsemat-mata-const-sparsemat-matb-const-sparsemat-matc"]], "static void dotFix(SparseMatC& matAB, const SparseMat& matA, const SparseMat& matB, const SparseMatC& matC);": [[5, "static-void-dotfix-sparsematc-matab-const-sparsemat-mata-const-sparsemat-matb-const-sparsematc-matc"]], "static void dotFix(SparseMatC& matAB, const SparseMat& matA, const SparseMatC& matB, const SparseMatC& matC);": [[5, "static-void-dotfix-sparsematc-matab-const-sparsemat-mata-const-sparsematc-matb-const-sparsematc-matc"]], "static void dotFix(SparseMatC& matAB, const SparseMatC& matA, const SparseMatC& matB, const SparseMatC& matC);": [[5, "static-void-dotfix-sparsematc-matab-const-sparsematc-mata-const-sparsematc-matb-const-sparsematc-matc"]], "MatSolvers\u30af\u30e9\u30b9": [[5, "matsolvers"]], "static bool solveICCG(const slv_int size0, const double conv_cri, const int max_ite, const double accera, const SparseMat& matA, const double *vecB, double *results, bool init=false)": [[5, "static-bool-solveiccg-const-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-double-accera-const-sparsemat-mata-const-double-vecb-double-results-bool-init-false"]], "static bool solveICCG(const slv_int size0, const double conv_cri, const int max_ite, const double accera, const double normB, const SparseMat& matA, const double *vecB, double *results, bool init=false)": [[5, "static-bool-solveiccg-const-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-double-accera-const-double-normb-const-sparsemat-mata-const-double-vecb-double-results-bool-init-false"]], "static bool solveICCG(const slv_int size0, const double conv_cri, const int max_ite, const double accera, const SparseMat& matA, const Eigen::VectorXd& vecB, double *results, bool init=false)": [[5, "static-bool-solveiccg-const-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-double-accera-const-sparsemat-mata-const-eigen-vectorxd-vecb-double-results-bool-init-false"]], "static bool solveICCG(slv_int size0, const double conv_cri, const int max_ite, const double accera, const SparseMatC& matA, const dcomplex *vecB, dcomplex *results, bool init=false);": [[5, "static-bool-solveiccg-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-double-accera-const-sparsematc-mata-const-dcomplex-vecb-dcomplex-results-bool-init-false"]], "static bool solveICCG(slv_int size0, const double conv_cri, const int max_ite, const double accera, const double normB, const SparseMatC& matA, const dcomplex *vecB, dcomplex *results, bool init=false);": [[5, "static-bool-solveiccg-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-double-accera-const-double-normb-const-sparsematc-mata-const-dcomplex-vecb-dcomplex-results-bool-init-false"]], "static bool solveICCG(slv_int size0, const double conv_cri, const int max_ite, const double accera, const SparseMatC& matA, const Eigen::VectorXcd& vecB, dcomplex *results, bool init=false);": [[5, "static-bool-solveiccg-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-double-accera-const-sparsematc-mata-const-eigen-vectorxcd-vecb-dcomplex-results-bool-init-false"]], "static bool solveEigenICCG(const slv_int size0, const double conv_cri, const int max_ite, const SparseMat& matA, const Eigen::VectorXd& vecB, Eigen::VectorXd& results, bool init=false);": [[5, "static-bool-solveeigeniccg-const-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-sparsemat-mata-const-eigen-vectorxd-vecb-eigen-vectorxd-results-bool-init-false"]], "static bool solveEigenICCG(const slv_int size0, const double conv_cri, const int max_ite, const SparseMat& matA, const double* vecB, double* results, bool init=true);": [[5, "static-bool-solveeigeniccg-const-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-sparsemat-mata-const-double-vecb-double-results-bool-init-true"]], "static bool solveEigenBiCGstab(const slv_int size0, const double conv_cri, const int max_ite, const SparseMat& matA, const Eigen::VectorXd& vecB, Eigen::VectorXd& results, bool init=false);": [[5, "static-bool-solveeigenbicgstab-const-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-sparsemat-mata-const-eigen-vectorxd-vecb-eigen-vectorxd-results-bool-init-false"]], "static bool solveEigenBiCGstab(const slv_int size0, const double conv_cri, const int max_ite, const SparseMat& matA, const double* vecB, double* results, bool init=true);": [[5, "static-bool-solveeigenbicgstab-const-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-sparsemat-mata-const-double-vecb-double-results-bool-init-true"]], "static bool solveEigenICCG(const slv_int size0, const double conv_cri, const int max_ite, const SparseMatC& matA, const Eigen::VectorXcd& vecB, Eigen::VectorXcd& results, bool init=false);": [[5, "static-bool-solveeigeniccg-const-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-sparsematc-mata-const-eigen-vectorxcd-vecb-eigen-vectorxcd-results-bool-init-false"]], "static bool solveEigenICCG(const slv_int size0, const double conv_cri, const int max_ite, const SparseMatC& matA, const dcomplex* vecB, dcomplex* results, bool init=true);": [[5, "static-bool-solveeigeniccg-const-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-sparsematc-mata-const-dcomplex-vecb-dcomplex-results-bool-init-true"]], "static bool solveEigenBiCGstab(const slv_int size0, const double conv_cri, const int max_ite, const SparseMatC& matA, const Eigen::VectorXcd& vecB, Eigen::VectorXcd& results, bool init=false);": [[5, "static-bool-solveeigenbicgstab-const-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-sparsematc-mata-const-eigen-vectorxcd-vecb-eigen-vectorxcd-results-bool-init-false"]], "static bool solveEigenBiCGstab(const slv_int size0, const double conv_cri, const int max_ite, const SparseMatC& matA,  const dcomplex* vecB, dcomplex* results, bool init=false);": [[5, "static-bool-solveeigenbicgstab-const-slv-int-size0-const-double-conv-cri-const-int-max-ite-const-sparsematc-mata-const-dcomplex-vecb-dcomplex-results-bool-init-false"]], "[\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9]": [[3, "id1"]], "Get Start": [[3, "get-start"]], "\u81ea\u4f5c\u30d7\u30ed\u30b0\u30e9\u30e0\u3078\u306e\u30ea\u30f3\u30af": [[3, "id2"]]}, "indexentries": {}})